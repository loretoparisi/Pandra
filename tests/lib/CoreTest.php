<?php
namespace Pandra;

require_once 'PHPUnit/Framework.php';
require_once(dirname(__FILE__).'/../../config.php');

/**
 * Test class for Pandra.
 * Generated by PHPUnit on 2010-01-09 at 11:52:23.
 */
class CoreTest extends \PHPUnit_Framework_TestCase {

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * To test multiple nodes, add their connection strings here
     *
     * @access protected
     */
    protected function setUp() {
        //Core::auto('localhost');
        Core::connect('default', 'localhost');

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown() {
        Core::disconnect('default');
    }

    /**
     * Get a modes list
     */
    public function testSupportedModes() {
        $modes = Core::getSupportedModes();
        $this->assertTrue(is_array($modes) && !empty($modes));
    }

    /**
     * Set Read Mode
     */
    public function testSetReadMode() {
        $supportedModes = Core::getSupportedModes();
        foreach ($supportedModes as $mode) {
            Core::setReadMode($mode);
            $this->assertEquals(Core::getReadMode(), $mode);
        }
    }

    /**
     * Set Write Mode
     */
    public function testSetWriteMode() {
        $supportedModes = Core::getSupportedModes();
        foreach ($supportedModes as $mode) {
            Core::setWriteMode($mode);
            $this->assertEquals(Core::getWriteMode(), $mode);
        }
    }

    /**
     * Set active node to named 'default', as well as unknown 'NOP'
     */
    public function testSetActiveNode() {

        $tokens = Core::getPoolTokens();
        foreach ($tokens as $token) {
            $this->assertTrue(Core::setActiveNode($token));
        }
        $this->assertFalse(Core::setActiveNode('NOP'));
    }

    /**
     * @todo Implement testDisconnect().
     */
    public function testDisconnect() {
        $tokens = Core::getPoolTokens();
        foreach ($tokens as $token) {
            $this->assertTrue(Core::disconnect($token));
        }
    }

    /**
     * Disconnect all nodes
     */
    public function testDisconnectAll() {
        $this->assertTrue(Core::disconnectAll());
    }

    /**
     * Connect to a good and bad host
     */
    public function testConnect() {
        $this->assertTrue(Core::connect('default', 'localhost'));
        $this->assertFalse(Core::connect('default_BAD', 'ih-opethishostdoesntexist'));
    }

    /**
     * Get client for all supported modes
     */
    public function testGetClient() {
        $supportedModes = Core::getSupportedModes();
        foreach ($supportedModes as $mode) {
            Core::setReadMode($mode);
            $client = Core::getClient();
            $this->assertEquals(get_class($client), 'CassandraClient', "Bad Client (mode $mode)");
        }
    }

    /**
     * Describe a named keyspace
     */
    public function testDescribeKeyspace() {
        return;
        $ks = Core::describeKeyspace('Keyspace1');

        $this->assertTrue(is_array($ks) && !empty($ks));

        // While we don't care about the individual ColumnFamilies, we should
        // at least be able to pull out the default Standard1 CF Cassandra rolls out with
        $expectedKeys = array('CompareWith', 'Type', 'Desc');
        $diff = array_diff($expectedKeys, array_keys($ks['Standard1']));

        $this->assertTrue(empty($diff));
    }

    /**
     * @todo Implement testLoadConfigXML().
     */
    public function testLoadConfigXML() {
        $config = Core::loadConfig();
        $this->assertTrue(is_array($config) && !empty($config['cluster_name']));
        //$this->assertTrue(get_class($config) == 'SimpleXMLElement');
    }

    /**
     * @todo
     */
    public function testGetCFSlice() {
    }

    public function testGetCFSliceMulti() {
    }

    public function testGetCFColumnCount() {
    }

    public function testGetRangeKeys() {
    }

    /**
     * @todo
     */
    public function testDeleteColumnPath() {
    }

    /**
     * @todo
     */
    public function testSaveColumnPath() {
    }

    /**
     * @todo
     */
    public function testSaveSuperColumn() {
    }

    public function getSetConsistency() {

        $newC = cassandra_ConsistencyLevel::QUORUM;

        Core::setConsistency($newC);
        $this->assertTrue(Core::getConsistency() == $newC);
        $this->assertTrue(Core::getConsistency(cassandra_ConsistencyLevel::ONE) == cassandra_ConsistencyLevel::ONE);
    }
}
?>